* zk_utils_master
Master (mistress?) election, an implementation of the Zookeeper leader
election protocol found in the Zookeeper cookbook.
** Example
#+BEGIN_SRC Erlang
%% set up a connection to Zookeeper
{ok, ZkPid} = erlzk:connect([{"localhost", 2181}], 30000),

%% define a function to be executed as master
Fun = fun() ->
        io:format("I am master")
      end,

%% start leader election, runs 'Fun' after acquiring '/locks/foo'
{ok, LockPid} = zk_utils_master:spawn_link([ {lock,   "/locks/foo"}
                                           , {func,   Fun}
                                           , {zk_pid, ZkPid}
                                           ]),

%% wait for result
receive
  {'EXIT', LockPid, normal} ->;
    %% everything went well, Fun has been executed
    ok;
  {'EXIT', LockPid, _} ->
    %% something went wrong
    ok
end,
#+END_SRC

* zk_utils_queue
Queue abstraction
** Example
#+BEGIN_SRC Erlang
Q              = "/queues/somequeue",
{ok, ZkPid}    = erlzk:connect([{"localhost", 2181}], 30000),
ok             = zk_utils_queue:enqueue(foo, Q, ZkPid),
ok             = zk_utils_queue:enqueue(bar, Q, ZkPid),
{ok, foo}      = zk_utils_queue:dequeue(Q, ZkPid),
{ok, bar}      = zk_utils_queue:dequeue(Q, ZkPid),
{error, empty} = zk_utils_queue:dequeue(Q, ZkPid),
#+END_SRC
